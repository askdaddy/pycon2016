// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemoData.proto

#ifndef PROTOBUF_DemoData_2eproto__INCLUDED
#define PROTOBUF_DemoData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DemoData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DemoData_2eproto();
void protobuf_AssignDesc_DemoData_2eproto();
void protobuf_ShutdownFile_DemoData_2eproto();

class Constant;
class MessageInfo;
class PacketHeader;
class UserRegisterRequest;
class MessageSendRequest;
class MessageNotifyRequest;

enum Constant_Command {
  Constant_Command_CMD_USER_REGISTER = 256,
  Constant_Command_CMD_MESSAGE_SEND = 513,
  Constant_Command_CMD_MESSAGE_NOTIFY = 514
};
bool Constant_Command_IsValid(int value);
const Constant_Command Constant_Command_Command_MIN = Constant_Command_CMD_USER_REGISTER;
const Constant_Command Constant_Command_Command_MAX = Constant_Command_CMD_MESSAGE_NOTIFY;
const int Constant_Command_Command_ARRAYSIZE = Constant_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Constant_Command_descriptor();
inline const ::std::string& Constant_Command_Name(Constant_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Constant_Command_descriptor(), value);
}
inline bool Constant_Command_Parse(
    const ::std::string& name, Constant_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Constant_Command>(
    Constant_Command_descriptor(), name, value);
}
enum Constant_Result {
  Constant_Result_SUCCESS = 0,
  Constant_Result_ERROR_PARAMS = 1,
  Constant_Result_ERROR_SERVER = 2,
  Constant_Result_ERROR_USERNAME_EXIST = 3,
  Constant_Result_ERROR_USERNAME_NOT_EXIST = 4,
  Constant_Result_ERROR_FORBIDDEN = 5
};
bool Constant_Result_IsValid(int value);
const Constant_Result Constant_Result_Result_MIN = Constant_Result_SUCCESS;
const Constant_Result Constant_Result_Result_MAX = Constant_Result_ERROR_FORBIDDEN;
const int Constant_Result_Result_ARRAYSIZE = Constant_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* Constant_Result_descriptor();
inline const ::std::string& Constant_Result_Name(Constant_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    Constant_Result_descriptor(), value);
}
inline bool Constant_Result_Parse(
    const ::std::string& name, Constant_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Constant_Result>(
    Constant_Result_descriptor(), name, value);
}
// ===================================================================

class Constant : public ::google::protobuf::Message {
 public:
  Constant();
  virtual ~Constant();

  Constant(const Constant& from);

  inline Constant& operator=(const Constant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Constant& default_instance();

  void Swap(Constant* other);

  // implements Message ----------------------------------------------

  Constant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Constant& from);
  void MergeFrom(const Constant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Constant_Command Command;
  static const Command CMD_USER_REGISTER = Constant_Command_CMD_USER_REGISTER;
  static const Command CMD_MESSAGE_SEND = Constant_Command_CMD_MESSAGE_SEND;
  static const Command CMD_MESSAGE_NOTIFY = Constant_Command_CMD_MESSAGE_NOTIFY;
  static inline bool Command_IsValid(int value) {
    return Constant_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Constant_Command_Command_MIN;
  static const Command Command_MAX =
    Constant_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Constant_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Constant_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Constant_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Constant_Command_Parse(name, value);
  }

  typedef Constant_Result Result;
  static const Result SUCCESS = Constant_Result_SUCCESS;
  static const Result ERROR_PARAMS = Constant_Result_ERROR_PARAMS;
  static const Result ERROR_SERVER = Constant_Result_ERROR_SERVER;
  static const Result ERROR_USERNAME_EXIST = Constant_Result_ERROR_USERNAME_EXIST;
  static const Result ERROR_USERNAME_NOT_EXIST = Constant_Result_ERROR_USERNAME_NOT_EXIST;
  static const Result ERROR_FORBIDDEN = Constant_Result_ERROR_FORBIDDEN;
  static inline bool Result_IsValid(int value) {
    return Constant_Result_IsValid(value);
  }
  static const Result Result_MIN =
    Constant_Result_Result_MIN;
  static const Result Result_MAX =
    Constant_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    Constant_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return Constant_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return Constant_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return Constant_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DemoData.Constant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DemoData_2eproto();
  friend void protobuf_AssignDesc_DemoData_2eproto();
  friend void protobuf_ShutdownFile_DemoData_2eproto();

  void InitAsDefaultInstance();
  static Constant* default_instance_;
};
// -------------------------------------------------------------------

class MessageInfo : public ::google::protobuf::Message {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageInfo& default_instance();

  void Swap(MessageInfo* other);

  // implements Message ----------------------------------------------

  MessageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string from_id = 1;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  inline const ::std::string& from_id() const;
  inline void set_from_id(const ::std::string& value);
  inline void set_from_id(const char* value);
  inline void set_from_id(const char* value, size_t size);
  inline ::std::string* mutable_from_id();
  inline ::std::string* release_from_id();
  inline void set_allocated_from_id(::std::string* from_id);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:DemoData.MessageInfo)
 private:
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* from_id_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_DemoData_2eproto();
  friend void protobuf_AssignDesc_DemoData_2eproto();
  friend void protobuf_ShutdownFile_DemoData_2eproto();

  void InitAsDefaultInstance();
  static MessageInfo* default_instance_;
};
// -------------------------------------------------------------------

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();

  void Swap(PacketHeader* other);

  // implements Message ----------------------------------------------

  PacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 command = 3;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 3;
  inline ::google::protobuf::uint32 command() const;
  inline void set_command(::google::protobuf::uint32 value);

  // optional uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DemoData.PacketHeader)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 command_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 timestamp_;
  friend void  protobuf_AddDesc_DemoData_2eproto();
  friend void protobuf_AssignDesc_DemoData_2eproto();
  friend void protobuf_ShutdownFile_DemoData_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// -------------------------------------------------------------------

class UserRegisterRequest : public ::google::protobuf::Message {
 public:
  UserRegisterRequest();
  virtual ~UserRegisterRequest();

  UserRegisterRequest(const UserRegisterRequest& from);

  inline UserRegisterRequest& operator=(const UserRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterRequest& default_instance();

  void Swap(UserRegisterRequest* other);

  // implements Message ----------------------------------------------

  UserRegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRegisterRequest& from);
  void MergeFrom(const UserRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:DemoData.UserRegisterRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  friend void  protobuf_AddDesc_DemoData_2eproto();
  friend void protobuf_AssignDesc_DemoData_2eproto();
  friend void protobuf_ShutdownFile_DemoData_2eproto();

  void InitAsDefaultInstance();
  static UserRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class MessageSendRequest : public ::google::protobuf::Message {
 public:
  MessageSendRequest();
  virtual ~MessageSendRequest();

  MessageSendRequest(const MessageSendRequest& from);

  inline MessageSendRequest& operator=(const MessageSendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageSendRequest& default_instance();

  void Swap(MessageSendRequest* other);

  // implements Message ----------------------------------------------

  MessageSendRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageSendRequest& from);
  void MergeFrom(const MessageSendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string targets = 1;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 1;
  inline const ::std::string& targets(int index) const;
  inline ::std::string* mutable_targets(int index);
  inline void set_targets(int index, const ::std::string& value);
  inline void set_targets(int index, const char* value);
  inline void set_targets(int index, const char* value, size_t size);
  inline ::std::string* add_targets();
  inline void add_targets(const ::std::string& value);
  inline void add_targets(const char* value);
  inline void add_targets(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_targets();

  // optional .DemoData.MessageInfo message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::DemoData::MessageInfo& message() const;
  inline ::DemoData::MessageInfo* mutable_message();
  inline ::DemoData::MessageInfo* release_message();
  inline void set_allocated_message(::DemoData::MessageInfo* message);

  // @@protoc_insertion_point(class_scope:DemoData.MessageSendRequest)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> targets_;
  ::DemoData::MessageInfo* message_;
  friend void  protobuf_AddDesc_DemoData_2eproto();
  friend void protobuf_AssignDesc_DemoData_2eproto();
  friend void protobuf_ShutdownFile_DemoData_2eproto();

  void InitAsDefaultInstance();
  static MessageSendRequest* default_instance_;
};
// -------------------------------------------------------------------

class MessageNotifyRequest : public ::google::protobuf::Message {
 public:
  MessageNotifyRequest();
  virtual ~MessageNotifyRequest();

  MessageNotifyRequest(const MessageNotifyRequest& from);

  inline MessageNotifyRequest& operator=(const MessageNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageNotifyRequest& default_instance();

  void Swap(MessageNotifyRequest* other);

  // implements Message ----------------------------------------------

  MessageNotifyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageNotifyRequest& from);
  void MergeFrom(const MessageNotifyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DemoData.MessageInfo message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::DemoData::MessageInfo& message() const;
  inline ::DemoData::MessageInfo* mutable_message();
  inline ::DemoData::MessageInfo* release_message();
  inline void set_allocated_message(::DemoData::MessageInfo* message);

  // @@protoc_insertion_point(class_scope:DemoData.MessageNotifyRequest)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DemoData::MessageInfo* message_;
  friend void  protobuf_AddDesc_DemoData_2eproto();
  friend void protobuf_AssignDesc_DemoData_2eproto();
  friend void protobuf_ShutdownFile_DemoData_2eproto();

  void InitAsDefaultInstance();
  static MessageNotifyRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// Constant

// -------------------------------------------------------------------

// MessageInfo

// optional string from_id = 1;
inline bool MessageInfo::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageInfo::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageInfo::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageInfo::clear_from_id() {
  if (from_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_id_->clear();
  }
  clear_has_from_id();
}
inline const ::std::string& MessageInfo::from_id() const {
  // @@protoc_insertion_point(field_get:DemoData.MessageInfo.from_id)
  return *from_id_;
}
inline void MessageInfo::set_from_id(const ::std::string& value) {
  set_has_from_id();
  if (from_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_id_ = new ::std::string;
  }
  from_id_->assign(value);
  // @@protoc_insertion_point(field_set:DemoData.MessageInfo.from_id)
}
inline void MessageInfo::set_from_id(const char* value) {
  set_has_from_id();
  if (from_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_id_ = new ::std::string;
  }
  from_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:DemoData.MessageInfo.from_id)
}
inline void MessageInfo::set_from_id(const char* value, size_t size) {
  set_has_from_id();
  if (from_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_id_ = new ::std::string;
  }
  from_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DemoData.MessageInfo.from_id)
}
inline ::std::string* MessageInfo::mutable_from_id() {
  set_has_from_id();
  if (from_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    from_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DemoData.MessageInfo.from_id)
  return from_id_;
}
inline ::std::string* MessageInfo::release_from_id() {
  clear_has_from_id();
  if (from_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = from_id_;
    from_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageInfo::set_allocated_from_id(::std::string* from_id) {
  if (from_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete from_id_;
  }
  if (from_id) {
    set_has_from_id();
    from_id_ = from_id;
  } else {
    clear_has_from_id();
    from_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DemoData.MessageInfo.from_id)
}

// optional string content = 2;
inline bool MessageInfo::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageInfo::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MessageInfo::content() const {
  // @@protoc_insertion_point(field_get:DemoData.MessageInfo.content)
  return *content_;
}
inline void MessageInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:DemoData.MessageInfo.content)
}
inline void MessageInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:DemoData.MessageInfo.content)
}
inline void MessageInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DemoData.MessageInfo.content)
}
inline ::std::string* MessageInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DemoData.MessageInfo.content)
  return content_;
}
inline ::std::string* MessageInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DemoData.MessageInfo.content)
}

// -------------------------------------------------------------------

// PacketHeader

// optional uint64 id = 1;
inline bool PacketHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 PacketHeader::id() const {
  // @@protoc_insertion_point(field_get:DemoData.PacketHeader.id)
  return id_;
}
inline void PacketHeader::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DemoData.PacketHeader.id)
}

// optional uint32 version = 2;
inline bool PacketHeader::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 PacketHeader::version() const {
  // @@protoc_insertion_point(field_get:DemoData.PacketHeader.version)
  return version_;
}
inline void PacketHeader::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:DemoData.PacketHeader.version)
}

// optional uint32 command = 3;
inline bool PacketHeader::has_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PacketHeader::set_has_command() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PacketHeader::clear_has_command() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PacketHeader::clear_command() {
  command_ = 0u;
  clear_has_command();
}
inline ::google::protobuf::uint32 PacketHeader::command() const {
  // @@protoc_insertion_point(field_get:DemoData.PacketHeader.command)
  return command_;
}
inline void PacketHeader::set_command(::google::protobuf::uint32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:DemoData.PacketHeader.command)
}

// optional uint32 result = 4;
inline bool PacketHeader::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PacketHeader::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PacketHeader::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PacketHeader::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 PacketHeader::result() const {
  // @@protoc_insertion_point(field_get:DemoData.PacketHeader.result)
  return result_;
}
inline void PacketHeader::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:DemoData.PacketHeader.result)
}

// optional uint32 timestamp = 5;
inline bool PacketHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PacketHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PacketHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PacketHeader::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 PacketHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:DemoData.PacketHeader.timestamp)
  return timestamp_;
}
inline void PacketHeader::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:DemoData.PacketHeader.timestamp)
}

// -------------------------------------------------------------------

// UserRegisterRequest

// optional string username = 1;
inline bool UserRegisterRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRegisterRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRegisterRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRegisterRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserRegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:DemoData.UserRegisterRequest.username)
  return *username_;
}
inline void UserRegisterRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:DemoData.UserRegisterRequest.username)
}
inline void UserRegisterRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:DemoData.UserRegisterRequest.username)
}
inline void UserRegisterRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DemoData.UserRegisterRequest.username)
}
inline ::std::string* UserRegisterRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DemoData.UserRegisterRequest.username)
  return username_;
}
inline ::std::string* UserRegisterRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserRegisterRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DemoData.UserRegisterRequest.username)
}

// -------------------------------------------------------------------

// MessageSendRequest

// repeated string targets = 1;
inline int MessageSendRequest::targets_size() const {
  return targets_.size();
}
inline void MessageSendRequest::clear_targets() {
  targets_.Clear();
}
inline const ::std::string& MessageSendRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:DemoData.MessageSendRequest.targets)
  return targets_.Get(index);
}
inline ::std::string* MessageSendRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:DemoData.MessageSendRequest.targets)
  return targets_.Mutable(index);
}
inline void MessageSendRequest::set_targets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:DemoData.MessageSendRequest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void MessageSendRequest::set_targets(int index, const char* value) {
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DemoData.MessageSendRequest.targets)
}
inline void MessageSendRequest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DemoData.MessageSendRequest.targets)
}
inline ::std::string* MessageSendRequest::add_targets() {
  return targets_.Add();
}
inline void MessageSendRequest::add_targets(const ::std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DemoData.MessageSendRequest.targets)
}
inline void MessageSendRequest::add_targets(const char* value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DemoData.MessageSendRequest.targets)
}
inline void MessageSendRequest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DemoData.MessageSendRequest.targets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageSendRequest::targets() const {
  // @@protoc_insertion_point(field_list:DemoData.MessageSendRequest.targets)
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageSendRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:DemoData.MessageSendRequest.targets)
  return &targets_;
}

// optional .DemoData.MessageInfo message = 2;
inline bool MessageSendRequest::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageSendRequest::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageSendRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageSendRequest::clear_message() {
  if (message_ != NULL) message_->::DemoData::MessageInfo::Clear();
  clear_has_message();
}
inline const ::DemoData::MessageInfo& MessageSendRequest::message() const {
  // @@protoc_insertion_point(field_get:DemoData.MessageSendRequest.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::DemoData::MessageInfo* MessageSendRequest::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::DemoData::MessageInfo;
  // @@protoc_insertion_point(field_mutable:DemoData.MessageSendRequest.message)
  return message_;
}
inline ::DemoData::MessageInfo* MessageSendRequest::release_message() {
  clear_has_message();
  ::DemoData::MessageInfo* temp = message_;
  message_ = NULL;
  return temp;
}
inline void MessageSendRequest::set_allocated_message(::DemoData::MessageInfo* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:DemoData.MessageSendRequest.message)
}

// -------------------------------------------------------------------

// MessageNotifyRequest

// optional .DemoData.MessageInfo message = 1;
inline bool MessageNotifyRequest::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageNotifyRequest::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageNotifyRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageNotifyRequest::clear_message() {
  if (message_ != NULL) message_->::DemoData::MessageInfo::Clear();
  clear_has_message();
}
inline const ::DemoData::MessageInfo& MessageNotifyRequest::message() const {
  // @@protoc_insertion_point(field_get:DemoData.MessageNotifyRequest.message)
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::DemoData::MessageInfo* MessageNotifyRequest::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::DemoData::MessageInfo;
  // @@protoc_insertion_point(field_mutable:DemoData.MessageNotifyRequest.message)
  return message_;
}
inline ::DemoData::MessageInfo* MessageNotifyRequest::release_message() {
  clear_has_message();
  ::DemoData::MessageInfo* temp = message_;
  message_ = NULL;
  return temp;
}
inline void MessageNotifyRequest::set_allocated_message(::DemoData::MessageInfo* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
  // @@protoc_insertion_point(field_set_allocated:DemoData.MessageNotifyRequest.message)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DemoData

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DemoData::Constant_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DemoData::Constant_Command>() {
  return ::DemoData::Constant_Command_descriptor();
}
template <> struct is_proto_enum< ::DemoData::Constant_Result> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DemoData::Constant_Result>() {
  return ::DemoData::Constant_Result_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DemoData_2eproto__INCLUDED
